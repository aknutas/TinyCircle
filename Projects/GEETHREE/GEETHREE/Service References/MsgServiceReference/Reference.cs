//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.225
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace GEETHREE.MsgServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WireMessage", Namespace="http://schemas.datacontract.org/2004/07/TC_WS")]
    public partial class WireMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string msgTextField;
        
        private string recipientUserIdField;
        
        private string senderUserIdField;
        
        private System.DateTime timeStampField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msgText {
            get {
                return this.msgTextField;
            }
            set {
                if ((object.ReferenceEquals(this.msgTextField, value) != true)) {
                    this.msgTextField = value;
                    this.RaisePropertyChanged("msgText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string recipientUserId {
            get {
                return this.recipientUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.recipientUserIdField, value) != true)) {
                    this.recipientUserIdField = value;
                    this.RaisePropertyChanged("recipientUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string senderUserId {
            get {
                return this.senderUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.senderUserIdField, value) != true)) {
                    this.senderUserIdField = value;
                    this.RaisePropertyChanged("senderUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime timeStamp {
            get {
                return this.timeStampField;
            }
            set {
                if ((this.timeStampField.Equals(value) != true)) {
                    this.timeStampField = value;
                    this.RaisePropertyChanged("timeStamp");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WireHandShake", Namespace="http://schemas.datacontract.org/2004/07/TC_WS")]
    public partial class WireHandShake : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AliasField;
        
        private string PasswordField;
        
        private string UserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Alias {
            get {
                return this.AliasField;
            }
            set {
                if ((object.ReferenceEquals(this.AliasField, value) != true)) {
                    this.AliasField = value;
                    this.RaisePropertyChanged("Alias");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserId {
            get {
                return this.UserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIdField, value) != true)) {
                    this.UserIdField = value;
                    this.RaisePropertyChanged("UserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MsgServiceReference.IMsgService")]
    public interface IMsgService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/postMessage", ReplyAction="http://tempuri.org/IMsgService/postMessageResponse")]
        System.IAsyncResult BeginpostMessage(string receiverId, string senderId, string message, string appKey, System.DateTime timeStamp, System.AsyncCallback callback, object asyncState);
        
        bool EndpostMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/getMyMessages", ReplyAction="http://tempuri.org/IMsgService/getMyMessagesResponse")]
        System.IAsyncResult BegingetMyMessages(string receiverId, string appKey, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> EndgetMyMessages(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/ping", ReplyAction="http://tempuri.org/IMsgService/pingResponse")]
        System.IAsyncResult Beginping(string appKey, System.AsyncCallback callback, object asyncState);
        
        bool Endping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/postToastNotificationAddress", ReplyAction="http://tempuri.org/IMsgService/postToastNotificationAddressResponse")]
        System.IAsyncResult BeginpostToastNotificationAddress(string userId, string toastAddress, string appKey, System.AsyncCallback callback, object asyncState);
        
        void EndpostToastNotificationAddress(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/postHandShake", ReplyAction="http://tempuri.org/IMsgService/postHandShakeResponse")]
        System.IAsyncResult BeginpostHandShake(string userId, string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState);
        
        void EndpostHandShake(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/discoverHandShakes", ReplyAction="http://tempuri.org/IMsgService/discoverHandShakesResponse")]
        System.IAsyncResult BegindiscoverHandShakes(string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> EnddiscoverHandShakes(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMsgServiceChannel : GEETHREE.MsgServiceReference.IMsgService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class postMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public postMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMyMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMyMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class pingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public pingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class discoverHandShakesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public discoverHandShakesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MsgServiceClient : System.ServiceModel.ClientBase<GEETHREE.MsgServiceReference.IMsgService>, GEETHREE.MsgServiceReference.IMsgService {
        
        private BeginOperationDelegate onBeginpostMessageDelegate;
        
        private EndOperationDelegate onEndpostMessageDelegate;
        
        private System.Threading.SendOrPostCallback onpostMessageCompletedDelegate;
        
        private BeginOperationDelegate onBegingetMyMessagesDelegate;
        
        private EndOperationDelegate onEndgetMyMessagesDelegate;
        
        private System.Threading.SendOrPostCallback ongetMyMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginpingDelegate;
        
        private EndOperationDelegate onEndpingDelegate;
        
        private System.Threading.SendOrPostCallback onpingCompletedDelegate;
        
        private BeginOperationDelegate onBeginpostToastNotificationAddressDelegate;
        
        private EndOperationDelegate onEndpostToastNotificationAddressDelegate;
        
        private System.Threading.SendOrPostCallback onpostToastNotificationAddressCompletedDelegate;
        
        private BeginOperationDelegate onBeginpostHandShakeDelegate;
        
        private EndOperationDelegate onEndpostHandShakeDelegate;
        
        private System.Threading.SendOrPostCallback onpostHandShakeCompletedDelegate;
        
        private BeginOperationDelegate onBegindiscoverHandShakesDelegate;
        
        private EndOperationDelegate onEnddiscoverHandShakesDelegate;
        
        private System.Threading.SendOrPostCallback ondiscoverHandShakesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MsgServiceClient() {
        }
        
        public MsgServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MsgServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<postMessageCompletedEventArgs> postMessageCompleted;
        
        public event System.EventHandler<getMyMessagesCompletedEventArgs> getMyMessagesCompleted;
        
        public event System.EventHandler<pingCompletedEventArgs> pingCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> postToastNotificationAddressCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> postHandShakeCompleted;
        
        public event System.EventHandler<discoverHandShakesCompletedEventArgs> discoverHandShakesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BeginpostMessage(string receiverId, string senderId, string message, string appKey, System.DateTime timeStamp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginpostMessage(receiverId, senderId, message, appKey, timeStamp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GEETHREE.MsgServiceReference.IMsgService.EndpostMessage(System.IAsyncResult result) {
            return base.Channel.EndpostMessage(result);
        }
        
        private System.IAsyncResult OnBeginpostMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string receiverId = ((string)(inValues[0]));
            string senderId = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            string appKey = ((string)(inValues[3]));
            System.DateTime timeStamp = ((System.DateTime)(inValues[4]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BeginpostMessage(receiverId, senderId, message, appKey, timeStamp, callback, asyncState);
        }
        
        private object[] OnEndpostMessage(System.IAsyncResult result) {
            bool retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndpostMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnpostMessageCompleted(object state) {
            if ((this.postMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.postMessageCompleted(this, new postMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void postMessageAsync(string receiverId, string senderId, string message, string appKey, System.DateTime timeStamp) {
            this.postMessageAsync(receiverId, senderId, message, appKey, timeStamp, null);
        }
        
        public void postMessageAsync(string receiverId, string senderId, string message, string appKey, System.DateTime timeStamp, object userState) {
            if ((this.onBeginpostMessageDelegate == null)) {
                this.onBeginpostMessageDelegate = new BeginOperationDelegate(this.OnBeginpostMessage);
            }
            if ((this.onEndpostMessageDelegate == null)) {
                this.onEndpostMessageDelegate = new EndOperationDelegate(this.OnEndpostMessage);
            }
            if ((this.onpostMessageCompletedDelegate == null)) {
                this.onpostMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpostMessageCompleted);
            }
            base.InvokeAsync(this.onBeginpostMessageDelegate, new object[] {
                        receiverId,
                        senderId,
                        message,
                        appKey,
                        timeStamp}, this.onEndpostMessageDelegate, this.onpostMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BegingetMyMessages(string receiverId, string appKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMyMessages(receiverId, appKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> GEETHREE.MsgServiceReference.IMsgService.EndgetMyMessages(System.IAsyncResult result) {
            return base.Channel.EndgetMyMessages(result);
        }
        
        private System.IAsyncResult OnBegingetMyMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string receiverId = ((string)(inValues[0]));
            string appKey = ((string)(inValues[1]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BegingetMyMessages(receiverId, appKey, callback, asyncState);
        }
        
        private object[] OnEndgetMyMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndgetMyMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetMyMessagesCompleted(object state) {
            if ((this.getMyMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMyMessagesCompleted(this, new getMyMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMyMessagesAsync(string receiverId, string appKey) {
            this.getMyMessagesAsync(receiverId, appKey, null);
        }
        
        public void getMyMessagesAsync(string receiverId, string appKey, object userState) {
            if ((this.onBegingetMyMessagesDelegate == null)) {
                this.onBegingetMyMessagesDelegate = new BeginOperationDelegate(this.OnBegingetMyMessages);
            }
            if ((this.onEndgetMyMessagesDelegate == null)) {
                this.onEndgetMyMessagesDelegate = new EndOperationDelegate(this.OnEndgetMyMessages);
            }
            if ((this.ongetMyMessagesCompletedDelegate == null)) {
                this.ongetMyMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMyMessagesCompleted);
            }
            base.InvokeAsync(this.onBegingetMyMessagesDelegate, new object[] {
                        receiverId,
                        appKey}, this.onEndgetMyMessagesDelegate, this.ongetMyMessagesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.Beginping(string appKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.Beginping(appKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GEETHREE.MsgServiceReference.IMsgService.Endping(System.IAsyncResult result) {
            return base.Channel.Endping(result);
        }
        
        private System.IAsyncResult OnBeginping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string appKey = ((string)(inValues[0]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).Beginping(appKey, callback, asyncState);
        }
        
        private object[] OnEndping(System.IAsyncResult result) {
            bool retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).Endping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnpingCompleted(object state) {
            if ((this.pingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.pingCompleted(this, new pingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void pingAsync(string appKey) {
            this.pingAsync(appKey, null);
        }
        
        public void pingAsync(string appKey, object userState) {
            if ((this.onBeginpingDelegate == null)) {
                this.onBeginpingDelegate = new BeginOperationDelegate(this.OnBeginping);
            }
            if ((this.onEndpingDelegate == null)) {
                this.onEndpingDelegate = new EndOperationDelegate(this.OnEndping);
            }
            if ((this.onpingCompletedDelegate == null)) {
                this.onpingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpingCompleted);
            }
            base.InvokeAsync(this.onBeginpingDelegate, new object[] {
                        appKey}, this.onEndpingDelegate, this.onpingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BeginpostToastNotificationAddress(string userId, string toastAddress, string appKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginpostToastNotificationAddress(userId, toastAddress, appKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void GEETHREE.MsgServiceReference.IMsgService.EndpostToastNotificationAddress(System.IAsyncResult result) {
            base.Channel.EndpostToastNotificationAddress(result);
        }
        
        private System.IAsyncResult OnBeginpostToastNotificationAddress(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string toastAddress = ((string)(inValues[1]));
            string appKey = ((string)(inValues[2]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BeginpostToastNotificationAddress(userId, toastAddress, appKey, callback, asyncState);
        }
        
        private object[] OnEndpostToastNotificationAddress(System.IAsyncResult result) {
            ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndpostToastNotificationAddress(result);
            return null;
        }
        
        private void OnpostToastNotificationAddressCompleted(object state) {
            if ((this.postToastNotificationAddressCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.postToastNotificationAddressCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void postToastNotificationAddressAsync(string userId, string toastAddress, string appKey) {
            this.postToastNotificationAddressAsync(userId, toastAddress, appKey, null);
        }
        
        public void postToastNotificationAddressAsync(string userId, string toastAddress, string appKey, object userState) {
            if ((this.onBeginpostToastNotificationAddressDelegate == null)) {
                this.onBeginpostToastNotificationAddressDelegate = new BeginOperationDelegate(this.OnBeginpostToastNotificationAddress);
            }
            if ((this.onEndpostToastNotificationAddressDelegate == null)) {
                this.onEndpostToastNotificationAddressDelegate = new EndOperationDelegate(this.OnEndpostToastNotificationAddress);
            }
            if ((this.onpostToastNotificationAddressCompletedDelegate == null)) {
                this.onpostToastNotificationAddressCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpostToastNotificationAddressCompleted);
            }
            base.InvokeAsync(this.onBeginpostToastNotificationAddressDelegate, new object[] {
                        userId,
                        toastAddress,
                        appKey}, this.onEndpostToastNotificationAddressDelegate, this.onpostToastNotificationAddressCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BeginpostHandShake(string userId, string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginpostHandShake(userId, userAlias, password, appKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        void GEETHREE.MsgServiceReference.IMsgService.EndpostHandShake(System.IAsyncResult result) {
            base.Channel.EndpostHandShake(result);
        }
        
        private System.IAsyncResult OnBeginpostHandShake(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userId = ((string)(inValues[0]));
            string userAlias = ((string)(inValues[1]));
            string password = ((string)(inValues[2]));
            string appKey = ((string)(inValues[3]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BeginpostHandShake(userId, userAlias, password, appKey, callback, asyncState);
        }
        
        private object[] OnEndpostHandShake(System.IAsyncResult result) {
            ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndpostHandShake(result);
            return null;
        }
        
        private void OnpostHandShakeCompleted(object state) {
            if ((this.postHandShakeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.postHandShakeCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void postHandShakeAsync(string userId, string userAlias, string password, string appKey) {
            this.postHandShakeAsync(userId, userAlias, password, appKey, null);
        }
        
        public void postHandShakeAsync(string userId, string userAlias, string password, string appKey, object userState) {
            if ((this.onBeginpostHandShakeDelegate == null)) {
                this.onBeginpostHandShakeDelegate = new BeginOperationDelegate(this.OnBeginpostHandShake);
            }
            if ((this.onEndpostHandShakeDelegate == null)) {
                this.onEndpostHandShakeDelegate = new EndOperationDelegate(this.OnEndpostHandShake);
            }
            if ((this.onpostHandShakeCompletedDelegate == null)) {
                this.onpostHandShakeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpostHandShakeCompleted);
            }
            base.InvokeAsync(this.onBeginpostHandShakeDelegate, new object[] {
                        userId,
                        userAlias,
                        password,
                        appKey}, this.onEndpostHandShakeDelegate, this.onpostHandShakeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BegindiscoverHandShakes(string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegindiscoverHandShakes(userAlias, password, appKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> GEETHREE.MsgServiceReference.IMsgService.EnddiscoverHandShakes(System.IAsyncResult result) {
            return base.Channel.EnddiscoverHandShakes(result);
        }
        
        private System.IAsyncResult OnBegindiscoverHandShakes(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userAlias = ((string)(inValues[0]));
            string password = ((string)(inValues[1]));
            string appKey = ((string)(inValues[2]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BegindiscoverHandShakes(userAlias, password, appKey, callback, asyncState);
        }
        
        private object[] OnEnddiscoverHandShakes(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).EnddiscoverHandShakes(result);
            return new object[] {
                    retVal};
        }
        
        private void OndiscoverHandShakesCompleted(object state) {
            if ((this.discoverHandShakesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.discoverHandShakesCompleted(this, new discoverHandShakesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void discoverHandShakesAsync(string userAlias, string password, string appKey) {
            this.discoverHandShakesAsync(userAlias, password, appKey, null);
        }
        
        public void discoverHandShakesAsync(string userAlias, string password, string appKey, object userState) {
            if ((this.onBegindiscoverHandShakesDelegate == null)) {
                this.onBegindiscoverHandShakesDelegate = new BeginOperationDelegate(this.OnBegindiscoverHandShakes);
            }
            if ((this.onEnddiscoverHandShakesDelegate == null)) {
                this.onEnddiscoverHandShakesDelegate = new EndOperationDelegate(this.OnEnddiscoverHandShakes);
            }
            if ((this.ondiscoverHandShakesCompletedDelegate == null)) {
                this.ondiscoverHandShakesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OndiscoverHandShakesCompleted);
            }
            base.InvokeAsync(this.onBegindiscoverHandShakesDelegate, new object[] {
                        userAlias,
                        password,
                        appKey}, this.onEnddiscoverHandShakesDelegate, this.ondiscoverHandShakesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GEETHREE.MsgServiceReference.IMsgService CreateChannel() {
            return new MsgServiceClientChannel(this);
        }
        
        private class MsgServiceClientChannel : ChannelBase<GEETHREE.MsgServiceReference.IMsgService>, GEETHREE.MsgServiceReference.IMsgService {
            
            public MsgServiceClientChannel(System.ServiceModel.ClientBase<GEETHREE.MsgServiceReference.IMsgService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginpostMessage(string receiverId, string senderId, string message, string appKey, System.DateTime timeStamp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[5];
                _args[0] = receiverId;
                _args[1] = senderId;
                _args[2] = message;
                _args[3] = appKey;
                _args[4] = timeStamp;
                System.IAsyncResult _result = base.BeginInvoke("postMessage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndpostMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("postMessage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetMyMessages(string receiverId, string appKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = receiverId;
                _args[1] = appKey;
                System.IAsyncResult _result = base.BeginInvoke("getMyMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> EndgetMyMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> _result = ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage>)(base.EndInvoke("getMyMessages", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult Beginping(string appKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = appKey;
                System.IAsyncResult _result = base.BeginInvoke("ping", _args, callback, asyncState);
                return _result;
            }
            
            public bool Endping(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("ping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginpostToastNotificationAddress(string userId, string toastAddress, string appKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userId;
                _args[1] = toastAddress;
                _args[2] = appKey;
                System.IAsyncResult _result = base.BeginInvoke("postToastNotificationAddress", _args, callback, asyncState);
                return _result;
            }
            
            public void EndpostToastNotificationAddress(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("postToastNotificationAddress", _args, result);
            }
            
            public System.IAsyncResult BeginpostHandShake(string userId, string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userId;
                _args[1] = userAlias;
                _args[2] = password;
                _args[3] = appKey;
                System.IAsyncResult _result = base.BeginInvoke("postHandShake", _args, callback, asyncState);
                return _result;
            }
            
            public void EndpostHandShake(System.IAsyncResult result) {
                object[] _args = new object[0];
                base.EndInvoke("postHandShake", _args, result);
            }
            
            public System.IAsyncResult BegindiscoverHandShakes(string userAlias, string password, string appKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = userAlias;
                _args[1] = password;
                _args[2] = appKey;
                System.IAsyncResult _result = base.BeginInvoke("discoverHandShakes", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> EnddiscoverHandShakes(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake> _result = ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireHandShake>)(base.EndInvoke("discoverHandShakes", _args, result)));
                return _result;
            }
        }
    }
}

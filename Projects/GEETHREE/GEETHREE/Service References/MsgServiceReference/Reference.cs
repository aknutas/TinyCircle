//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.239
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.Phone.ServiceReference, version 3.7.0.0
// 
namespace GEETHREE.MsgServiceReference {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WireMessage", Namespace="http://schemas.datacontract.org/2004/07/TC_WS")]
    public partial class WireMessage : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string msgTextField;
        
        private string recipientUserIdField;
        
        private string senderUserIdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string msgText {
            get {
                return this.msgTextField;
            }
            set {
                if ((object.ReferenceEquals(this.msgTextField, value) != true)) {
                    this.msgTextField = value;
                    this.RaisePropertyChanged("msgText");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string recipientUserId {
            get {
                return this.recipientUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.recipientUserIdField, value) != true)) {
                    this.recipientUserIdField = value;
                    this.RaisePropertyChanged("recipientUserId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string senderUserId {
            get {
                return this.senderUserIdField;
            }
            set {
                if ((object.ReferenceEquals(this.senderUserIdField, value) != true)) {
                    this.senderUserIdField = value;
                    this.RaisePropertyChanged("senderUserId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="MsgServiceReference.IMsgService")]
    public interface IMsgService {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/postMessage", ReplyAction="http://tempuri.org/IMsgService/postMessageResponse")]
        System.IAsyncResult BeginpostMessage(string receiverId, string senderId, string message, System.AsyncCallback callback, object asyncState);
        
        bool EndpostMessage(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IMsgService/getMyMessages", ReplyAction="http://tempuri.org/IMsgService/getMyMessagesResponse")]
        System.IAsyncResult BegingetMyMessages(string receiverId, System.AsyncCallback callback, object asyncState);
        
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> EndgetMyMessages(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMsgServiceChannel : GEETHREE.MsgServiceReference.IMsgService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class postMessageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public postMessageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public bool Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class getMyMessagesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public getMyMessagesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage>)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MsgServiceClient : System.ServiceModel.ClientBase<GEETHREE.MsgServiceReference.IMsgService>, GEETHREE.MsgServiceReference.IMsgService {
        
        private BeginOperationDelegate onBeginpostMessageDelegate;
        
        private EndOperationDelegate onEndpostMessageDelegate;
        
        private System.Threading.SendOrPostCallback onpostMessageCompletedDelegate;
        
        private BeginOperationDelegate onBegingetMyMessagesDelegate;
        
        private EndOperationDelegate onEndgetMyMessagesDelegate;
        
        private System.Threading.SendOrPostCallback ongetMyMessagesCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public MsgServiceClient() {
        }
        
        public MsgServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MsgServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MsgServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<postMessageCompletedEventArgs> postMessageCompleted;
        
        public event System.EventHandler<getMyMessagesCompletedEventArgs> getMyMessagesCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BeginpostMessage(string receiverId, string senderId, string message, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginpostMessage(receiverId, senderId, message, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        bool GEETHREE.MsgServiceReference.IMsgService.EndpostMessage(System.IAsyncResult result) {
            return base.Channel.EndpostMessage(result);
        }
        
        private System.IAsyncResult OnBeginpostMessage(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string receiverId = ((string)(inValues[0]));
            string senderId = ((string)(inValues[1]));
            string message = ((string)(inValues[2]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BeginpostMessage(receiverId, senderId, message, callback, asyncState);
        }
        
        private object[] OnEndpostMessage(System.IAsyncResult result) {
            bool retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndpostMessage(result);
            return new object[] {
                    retVal};
        }
        
        private void OnpostMessageCompleted(object state) {
            if ((this.postMessageCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.postMessageCompleted(this, new postMessageCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void postMessageAsync(string receiverId, string senderId, string message) {
            this.postMessageAsync(receiverId, senderId, message, null);
        }
        
        public void postMessageAsync(string receiverId, string senderId, string message, object userState) {
            if ((this.onBeginpostMessageDelegate == null)) {
                this.onBeginpostMessageDelegate = new BeginOperationDelegate(this.OnBeginpostMessage);
            }
            if ((this.onEndpostMessageDelegate == null)) {
                this.onEndpostMessageDelegate = new EndOperationDelegate(this.OnEndpostMessage);
            }
            if ((this.onpostMessageCompletedDelegate == null)) {
                this.onpostMessageCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnpostMessageCompleted);
            }
            base.InvokeAsync(this.onBeginpostMessageDelegate, new object[] {
                        receiverId,
                        senderId,
                        message}, this.onEndpostMessageDelegate, this.onpostMessageCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult GEETHREE.MsgServiceReference.IMsgService.BegingetMyMessages(string receiverId, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BegingetMyMessages(receiverId, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> GEETHREE.MsgServiceReference.IMsgService.EndgetMyMessages(System.IAsyncResult result) {
            return base.Channel.EndgetMyMessages(result);
        }
        
        private System.IAsyncResult OnBegingetMyMessages(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string receiverId = ((string)(inValues[0]));
            return ((GEETHREE.MsgServiceReference.IMsgService)(this)).BegingetMyMessages(receiverId, callback, asyncState);
        }
        
        private object[] OnEndgetMyMessages(System.IAsyncResult result) {
            System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> retVal = ((GEETHREE.MsgServiceReference.IMsgService)(this)).EndgetMyMessages(result);
            return new object[] {
                    retVal};
        }
        
        private void OngetMyMessagesCompleted(object state) {
            if ((this.getMyMessagesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.getMyMessagesCompleted(this, new getMyMessagesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void getMyMessagesAsync(string receiverId) {
            this.getMyMessagesAsync(receiverId, null);
        }
        
        public void getMyMessagesAsync(string receiverId, object userState) {
            if ((this.onBegingetMyMessagesDelegate == null)) {
                this.onBegingetMyMessagesDelegate = new BeginOperationDelegate(this.OnBegingetMyMessages);
            }
            if ((this.onEndgetMyMessagesDelegate == null)) {
                this.onEndgetMyMessagesDelegate = new EndOperationDelegate(this.OnEndgetMyMessages);
            }
            if ((this.ongetMyMessagesCompletedDelegate == null)) {
                this.ongetMyMessagesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OngetMyMessagesCompleted);
            }
            base.InvokeAsync(this.onBegingetMyMessagesDelegate, new object[] {
                        receiverId}, this.onEndgetMyMessagesDelegate, this.ongetMyMessagesCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override GEETHREE.MsgServiceReference.IMsgService CreateChannel() {
            return new MsgServiceClientChannel(this);
        }
        
        private class MsgServiceClientChannel : ChannelBase<GEETHREE.MsgServiceReference.IMsgService>, GEETHREE.MsgServiceReference.IMsgService {
            
            public MsgServiceClientChannel(System.ServiceModel.ClientBase<GEETHREE.MsgServiceReference.IMsgService> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginpostMessage(string receiverId, string senderId, string message, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = receiverId;
                _args[1] = senderId;
                _args[2] = message;
                System.IAsyncResult _result = base.BeginInvoke("postMessage", _args, callback, asyncState);
                return _result;
            }
            
            public bool EndpostMessage(System.IAsyncResult result) {
                object[] _args = new object[0];
                bool _result = ((bool)(base.EndInvoke("postMessage", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BegingetMyMessages(string receiverId, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = receiverId;
                System.IAsyncResult _result = base.BeginInvoke("getMyMessages", _args, callback, asyncState);
                return _result;
            }
            
            public System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> EndgetMyMessages(System.IAsyncResult result) {
                object[] _args = new object[0];
                System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage> _result = ((System.Collections.ObjectModel.ObservableCollection<GEETHREE.MsgServiceReference.WireMessage>)(base.EndInvoke("getMyMessages", _args, result)));
                return _result;
            }
        }
    }
}
